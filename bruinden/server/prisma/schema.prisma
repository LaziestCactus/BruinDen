generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String? @unique
  emailVerified DateTime?
  image String?
  uid String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  collegeYear String?
  gender String?
  accounts Account[]
  listings Listing[]
  posts Post[]
  comments Comment[]
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.ObjectId
  access_token String? @db.ObjectId
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.ObjectId
  session_state String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Listing {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String
  imageSrc String
  createdDate DateTime @default(now())
  category String
  roomCount Int
  bathroomCount Int
  address String
  userID String @db.ObjectId
  price Int

  user User @relation(fields: [userID], references: [id], onDelete: Cascade)
}

model Post {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  content String
  userId  String @db.ObjectId
  createdAt DateTime  @default(now())
  comments  Comment[]
  user User @relation(fields: [userId], references: [id])
}

model Comment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  text String
  userId String @db.ObjectId
  postId String @db.ObjectId
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}


//downgrade react
